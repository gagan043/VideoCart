package com.gp2u.lite.view;

import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;



/**
 * Created by AuthorName on 6 Jun 2018.
 * Copyright Â© 2018 CompanyName. All rights reserved.
 *
 * This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
 * http://www.paintcodeapp.com
 *
 * @author AuthorName
 */
public class CareComplete {
    
    
    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }
    
    // In Trial version of PaintCode, the code generation is limited to 3 canvases.
    
    // Canvas Drawings
    // Tab
    
    private static class CacheForCanvas1 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 885f, 761f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawCanvas1(Canvas canvas) {
        CareComplete.drawCanvas1(canvas, new RectF(0f, 0f, 885f, 761f), ResizingBehavior.AspectFit);
    }
    
    public static void drawCanvas1(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint = CacheForCanvas1.paint;
        
        // Local Colors
        int fillColor = Color.argb(255, 85, 138, 200);
        int fillColor2 = Color.argb(255, 0, 66, 128);
        int fillColor3 = Color.argb(255, 255, 255, 255);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCanvas1.resizedFrame;
        CareComplete.resizingBehaviorApply(resizing, CacheForCanvas1.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 885f, resizedFrame.height() / 761f);
        
        // care-complete-icon Group
        {
            // Bezier
            RectF bezierRect = CacheForCanvas1.bezierRect;
            bezierRect.set(0f, -0.02f, 674.16f, 761f);
            Path bezierPath = CacheForCanvas1.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(645.16f, 622.06f);
            bezierPath.lineTo(642.93f, 622.06f);
            bezierPath.cubicTo(596.35f, 620.86f, 557.93f, 583.63f, 551.93f, 536.73f);
            bezierPath.cubicTo(508.07f, 586.07f, 445.35f, 615.73f, 378.15f, 615.73f);
            bezierPath.cubicTo(249.23f, 615.73f, 144.36f, 510.22f, 144.36f, 380.51f);
            bezierPath.cubicTo(144.36f, 250.8f, 249.28f, 145.29f, 378.2f, 145.29f);
            bezierPath.cubicTo(445.2f, 145.29f, 507.75f, 174.78f, 551.59f, 223.85f);
            bezierPath.cubicTo(556.46f, 176.23f, 596.59f, 138.97f, 645.16f, 138.97f);
            bezierPath.lineTo(647.46f, 138.97f);
            bezierPath.lineTo(648.13f, 138.99f);
            bezierPath.cubicTo(657f, 139.3f, 665.77f, 140.93f, 674.16f, 143.81f);
            bezierPath.cubicTo(602.8f, 53.96f, 494.26f, -0.02f, 378.2f, -0.02f);
            bezierPath.cubicTo(169.66f, -0.02f, 0f, 170.68f, 0f, 380.49f);
            bezierPath.cubicTo(0f, 590.3f, 169.66f, 761f, 378.2f, 761f);
            bezierPath.cubicTo(494.13f, 761f, 602.55f, 707.15f, 673.66f, 617.57f);
            bezierPath.lineTo(673.85f, 617.51f);
            bezierPath.cubicTo(664.57f, 620.52f, 654.87f, 622.06f, 645.11f, 622.06f);
            bezierPath.lineTo(645.16f, 622.06f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor);
            //canvas.drawPath(bezierPath, paint);
            
            // Bezier 2
            RectF bezier2Rect = CacheForCanvas1.bezier2Rect;
            bezier2Rect.set(405.06f, 138.97f, 885.3f, 622.06f);
            Path bezier2Path = CacheForCanvas1.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(787.83f, 285.87f);
            bezier2Path.lineTo(739.23f, 285.87f);
            bezier2Path.lineTo(739.23f, 236.97f);
            bezier2Path.cubicTo(739.23f, 184.24f, 698.12f, 140.29f, 647.46f, 138.97f);
            bezier2Path.lineTo(645.16f, 138.97f);
            bezier2Path.cubicTo(593.29f, 138.97f, 551.09f, 181.43f, 551.09f, 233.61f);
            bezier2Path.lineTo(551.09f, 285.87f);
            bezier2Path.lineTo(502.49f, 285.87f);
            bezier2Path.cubicTo(450.08f, 285.87f, 406.4f, 327.21f, 405.1f, 378.03f);
            bezier2Path.lineTo(405.12f, 377.51f);
            bezier2Path.cubicTo(404.22f, 403.08f, 413.75f, 427.91f, 431.52f, 446.3f);
            bezier2Path.lineTo(431.92f, 446.72f);
            bezier2Path.cubicTo(449.47f, 464.89f, 473.65f, 475.15f, 498.91f, 475.15f);
            bezier2Path.lineTo(551.09f, 475.15f);
            bezier2Path.lineTo(551.09f, 524.06f);
            bezier2Path.cubicTo(551.09f, 576.77f, 592.22f, 620.73f, 642.93f, 622.06f);
            bezier2Path.lineTo(645.16f, 622.06f);
            bezier2Path.cubicTo(697.02f, 622.06f, 739.23f, 579.61f, 739.23f, 527.42f);
            bezier2Path.lineTo(739.23f, 475.15f);
            bezier2Path.lineTo(791.23f, 475.15f);
            bezier2Path.lineTo(791.48f, 475.15f);
            bezier2Path.cubicTo(816.73f, 475.15f, 840.9f, 464.89f, 858.44f, 446.73f);
            bezier2Path.lineTo(858.83f, 446.32f);
            bezier2Path.cubicTo(876.6f, 427.92f, 886.14f, 403.08f, 885.24f, 377.51f);
            bezier2Path.cubicTo(883.93f, 327.21f, 840.24f, 285.87f, 787.83f, 285.87f);
            bezier2Path.close();
            bezier2Path.moveTo(833.42f, 421.95f);
            bezier2Path.lineTo(833.3f, 422.07f);
            bezier2Path.cubicTo(822.31f, 433.45f, 807.17f, 439.88f, 791.35f, 439.88f);
            bezier2Path.lineTo(734.83f, 439.88f);
            bezier2Path.lineTo(734.95f, 439.88f);
            bezier2Path.cubicTo(717.95f, 439.88f, 704.17f, 453.66f, 704.17f, 470.66f);
            bezier2Path.lineTo(704.17f, 527.42f);
            bezier2Path.cubicTo(704.17f, 560.15f, 677.7f, 586.78f, 645.17f, 586.78f);
            bezier2Path.lineTo(643.57f, 586.78f);
            bezier2Path.cubicTo(611.9f, 585.98f, 586.13f, 557.84f, 586.13f, 524.08f);
            bezier2Path.lineTo(586.13f, 470.88f);
            bezier2Path.lineTo(586.13f, 470.82f);
            bezier2Path.cubicTo(586.13f, 453.73f, 572.28f, 439.88f, 555.19f, 439.88f);
            bezier2Path.lineTo(499.12f, 439.88f);
            bezier2Path.lineTo(498.97f, 439.88f);
            bezier2Path.cubicTo(483.14f, 439.88f, 467.98f, 433.45f, 456.98f, 422.06f);
            bezier2Path.lineTo(456.71f, 421.78f);
            bezier2Path.cubicTo(445.56f, 410.23f, 439.58f, 394.65f, 440.14f, 378.61f);
            bezier2Path.cubicTo(440.95f, 347.08f, 468.91f, 321.15f, 502.46f, 321.15f);
            bezier2Path.lineTo(555.46f, 321.15f);
            bezier2Path.lineTo(555.32f, 321.15f);
            bezier2Path.cubicTo(572.36f, 321.15f, 586.18f, 307.33f, 586.18f, 290.29f);
            bezier2Path.lineTo(586.18f, 233.61f);
            bezier2Path.cubicTo(586.18f, 200.87f, 612.64f, 174.23f, 645.11f, 174.23f);
            bezier2Path.lineTo(646.74f, 174.23f);
            bezier2Path.cubicTo(678.42f, 175.05f, 704.19f, 203.18f, 704.19f, 236.95f);
            bezier2Path.lineTo(704.19f, 290.25f);
            bezier2Path.lineTo(704.19f, 290.31f);
            bezier2Path.cubicTo(704.19f, 307.32f, 717.98f, 321.11f, 734.99f, 321.11f);
            bezier2Path.lineTo(787.86f, 321.11f);
            bezier2Path.cubicTo(821.42f, 321.11f, 849.38f, 347.04f, 850.18f, 378.9f);
            bezier2Path.lineTo(850.17f, 378.67f);
            bezier2Path.cubicTo(850.73f, 394.67f, 844.77f, 410.2f, 833.65f, 421.71f);
            bezier2Path.lineTo(833.42f, 421.95f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor2);
            canvas.drawPath(bezier2Path, paint);
            
            // Bezier 3
            RectF bezier3Rect = CacheForCanvas1.bezier3Rect;
            bezier3Rect.set(440.13f, 174.23f, 850.24f, 586.73f);
            Path bezier3Path = CacheForCanvas1.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(555.35f, 439.88f);
            bezier3Path.lineTo(499.15f, 439.88f);
            bezier3Path.lineTo(499f, 439.88f);
            bezier3Path.cubicTo(483.17f, 439.88f, 468.01f, 433.45f, 457.01f, 422.06f);
            bezier3Path.lineTo(456.74f, 421.78f);
            bezier3Path.cubicTo(445.59f, 410.23f, 439.61f, 394.65f, 440.17f, 378.61f);
            bezier3Path.cubicTo(440.98f, 347.08f, 468.94f, 321.15f, 502.5f, 321.15f);
            bezier3Path.lineTo(555.49f, 321.15f);
            bezier3Path.lineTo(555.35f, 321.15f);
            bezier3Path.cubicTo(572.39f, 321.15f, 586.21f, 307.33f, 586.21f, 290.29f);
            bezier3Path.lineTo(586.21f, 233.61f);
            bezier3Path.cubicTo(586.21f, 200.87f, 612.67f, 174.23f, 645.15f, 174.23f);
            bezier3Path.lineTo(646.77f, 174.23f);
            bezier3Path.cubicTo(678.45f, 175.05f, 704.22f, 203.18f, 704.22f, 236.95f);
            bezier3Path.lineTo(704.22f, 290.25f);
            bezier3Path.lineTo(704.22f, 290.31f);
            bezier3Path.cubicTo(704.22f, 307.32f, 718.01f, 321.11f, 735.02f, 321.11f);
            bezier3Path.lineTo(787.89f, 321.11f);
            bezier3Path.cubicTo(821.45f, 321.11f, 849.41f, 347.04f, 850.21f, 378.9f);
            bezier3Path.lineTo(850.2f, 378.62f);
            bezier3Path.cubicTo(850.76f, 394.63f, 844.79f, 410.19f, 833.66f, 421.72f);
            bezier3Path.lineTo(833.36f, 422.02f);
            bezier3Path.cubicTo(822.37f, 433.4f, 807.23f, 439.83f, 791.41f, 439.83f);
            bezier3Path.lineTo(734.83f, 439.83f);
            bezier3Path.lineTo(734.95f, 439.83f);
            bezier3Path.cubicTo(717.95f, 439.83f, 704.17f, 453.61f, 704.17f, 470.61f);
            bezier3Path.lineTo(704.17f, 527.37f);
            bezier3Path.cubicTo(704.17f, 560.09f, 677.7f, 586.73f, 645.17f, 586.73f);
            bezier3Path.lineTo(643.57f, 586.73f);
            bezier3Path.cubicTo(611.9f, 585.93f, 586.13f, 557.79f, 586.13f, 524.03f);
            bezier3Path.lineTo(586.13f, 470.83f);
            bezier3Path.lineTo(586.13f, 470.82f);
            bezier3Path.cubicTo(586.13f, 453.73f, 572.28f, 439.88f, 555.19f, 439.88f);
            bezier3Path.lineTo(555.35f, 439.88f);
            bezier3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor3);
            canvas.drawPath(bezier3Path, paint);
        }
        
        canvas.restore();
    }
    
    // Tab 2
    
    private static class CacheForCanvas2 {
        private static RectF originalFrame = new RectF(0f, 0f, 240f, 120f);
        private static RectF resizedFrame = new RectF();
    }
    
    public static void drawCanvas2(Canvas canvas) {
        CareComplete.drawCanvas2(canvas, new RectF(0f, 0f, 240f, 120f), ResizingBehavior.AspectFit);
    }
    
    public static void drawCanvas2(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCanvas2.resizedFrame;
        CareComplete.resizingBehaviorApply(resizing, CacheForCanvas2.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 240f, resizedFrame.height() / 120f);
        
        // Empty.
        
        canvas.restore();
    }
    
    
    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }
        
        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }
        
        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;
        
        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }
        
        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
            target.centerY() - newHeight / 2,
            target.centerX() + newWidth / 2,
            target.centerY() + newHeight / 2);
    }
    
    
}